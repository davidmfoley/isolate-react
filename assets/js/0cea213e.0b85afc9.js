"use strict";(self.webpackChunkisolate_react_docs=self.webpackChunkisolate_react_docs||[]).push([[999],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3512:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={title:"Default arguments"},c=void 0,l={unversionedId:"More/Dependencies/default-arguments",id:"More/Dependencies/default-arguments",title:"Default arguments",description:"Description",source:"@site/docs/More/Dependencies/04-default-arguments.md",sourceDirName:"More/Dependencies",slug:"/More/Dependencies/default-arguments",permalink:"/isolate-react/More/Dependencies/default-arguments",editUrl:"https://github.com/davidmfoley/isolate-react/docusaurus/docs/More/Dependencies/04-default-arguments.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Default arguments"},sidebar:"tutorialSidebar",previous:{title:"Service Locator",permalink:"/isolate-react/More/Dependencies/service-locator"},next:{title:"Class constructors",permalink:"/isolate-react/More/Dependencies/class-constructors"}},u=[{value:"Description",id:"description",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"A common usage: getting the current time",id:"a-common-usage-getting-the-current-time",children:[],level:2},{value:"Notes",id:"notes",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Add services to each function that uses them as arguments."),(0,i.kt)("p",null,"In production, use default argument values to bring in the production implementations."),(0,i.kt)("p",null,"In tests, pass in test implementations."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"api.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// production api implementation\nexport const api = {\n  getWidget: (id) => { ... }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"widgets.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { api } from './api'\n\nexport const widgets = {\n  getWidgetName: async (widgetId, widgetApi = api) => {\n    const widget = await widgetApi.getWidget(widgetId);\n    if (!widget) return \"Unknown Widget\"\n    return widget.name\n  }\n}\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"widgets.test.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { widgets } from './widgets'\n\ndescribe(\"getWidgetName\", () => {\n  test(\"unknown widget returns 'Unknown Widget'\", () => {\n    const fakeApi = {\n      getWidget: async () => undefined\n    }\n\n    // pass in the test implementation\n    expect(getWidgetName(42, fakeApi)).toEqual('Unknown Widget')\n  })\n})\n")),(0,i.kt)("h2",{id:"a-common-usage-getting-the-current-time"},"A common usage: getting the current time"),(0,i.kt)("p",null,"Testing time can be annoying. For example, we might have a function that returns a natural language description of the age of some entity in our system. Let's say, for example a comment on a blog post:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const describeAge = (comment) => {\n  \n  const ageInMilliseconds = Date.now() - comment.createdAt\n  if (ageInMilliseconds < 60 * 1000) {\n    return "Just now"\n  }\n\n  ... a bunch more logic here to diplay minutes, hours, days, weeks, etc. ....\n\n}\n')),(0,i.kt)("p",null,"Testing this requires generating different comment objects based on the current computer date. Since the computer date is changing as the tests run, it also makes it difficult to test boundary conditions. A simple solution is to add an additional argument with a default value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const describeAge = (comment, now = Date.now()) => {\n  \n  const ageInMilliseconds = now - comment.createdAt\n  if (ageInMilliseconds < 60 * 1000) {\n    return "Just now"\n  }\n\n  ... a bunch more logic here to diplay minutes, hours, days, weeks, etc. ....\n\n}\n')),(0,i.kt)("p",null,"Now it is simple to pass in a date for testing, and at runtime the current date will use used at all times."),(0,i.kt)("h2",{id:"notes"},"Notes"),(0,i.kt)("p",null,"This is a general technique that can be used anywhere, not only in react-aware code."))}d.isMDXComponent=!0}}]);