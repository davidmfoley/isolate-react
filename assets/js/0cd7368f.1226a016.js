"use strict";(self.webpackChunkisolate_react_docs=self.webpackChunkisolate_react_docs||[]).push([[887],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return d}});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=o.createContext({}),p=function(t){var e=o.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=p(t.components);return o.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},m=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,l=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return n?o.createElement(f,i(i({ref:e},c),{},{components:n})):o.createElement(f,i({ref:e},c))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3948:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var o=n(3117),a=n(102),r=(n(7294),n(3905)),i=["components"],s={title:"Anatomy of a component test"},l=void 0,p={unversionedId:"Testing Components/anatomy-of-a-test",id:"Testing Components/anatomy-of-a-test",title:"Anatomy of a component test",description:"Whether using isolateComponent, or isolateComponentTree, most component tests follow a similar pattern:",source:"@site/docs/Testing Components/01-anatomy-of-a-test.md",sourceDirName:"Testing Components",slug:"/Testing Components/anatomy-of-a-test",permalink:"/isolate-react/Testing Components/anatomy-of-a-test",editUrl:"https://github.com/davidmfoley/isolate-react/docusaurus/docs/Testing Components/01-anatomy-of-a-test.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Anatomy of a component test"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/isolate-react/Testing Components/overview"},next:{title:"isolateComponent - Test a single component",permalink:"/isolate-react/Testing Components/isolateComponent"}},c=[{value:"Step by step:",id:"step-by-step",children:[{value:"Step 1: isolate with <code>isolateComponent</code>:",id:"step-1-isolate-with-isolatecomponent",children:[],level:3},{value:"Step 2: Verify it starts out with a zero value",id:"step-2-verify-it-starts-out-with-a-zero-value",children:[],level:3},{value:"Step 3: Simulate interactions",id:"step-3-simulate-interactions",children:[],level:3},{value:"Step 4: Verify the updated content",id:"step-4-verify-the-updated-content",children:[],level:3}],level:2}],u={toc:c};function m(t){var e=t.components,n=(0,a.Z)(t,i);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Whether using ",(0,r.kt)("inlineCode",{parentName:"p"},"isolateComponent"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"isolateComponentTree"),", most component tests follow a similar pattern:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Isolate the component using ",(0,r.kt)("inlineCode",{parentName:"li"},"isolateComponent")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"isolateComponentTree")),(0,r.kt)("li",{parentName:"ol"},"Find children (components or dom elements) rendered by the isolated component."),(0,r.kt)("li",{parentName:"ol"},"Simulate some activity using the props of the children, or by updating the props of the isolated component."),(0,r.kt)("li",{parentName:"ol"},"Verify behavior by checking the content, using the same methods as in step 2.")),(0,r.kt)("p",null,"Let's say we want to create a button that counts how many times it's been clicked and displays that count:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState } from 'react'\n\n// this is the component we want to test\nexport const CounterButton = () => {\n  const [count, setCount] = useState(0)\n  return (\n  <div>\n    <span className=\"count\">{count}</span>\n    <button type='button' onClick= {() => setCount(count => count + 1)}>+1</button>\n  </div>\n  )\n}\n")),(0,r.kt)("p",null,"Our plan is to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Isolate the component using ",(0,r.kt)("inlineCode",{parentName:"li"},"isolateComponent")),(0,r.kt)("li",{parentName:"ol"},"Look at the content rendered by the isolated component to see that it is 0."),(0,r.kt)("li",{parentName:"ol"},"Simulate clicks on the button"),(0,r.kt)("li",{parentName:"ol"},"Check the content to see that it is updated.")),(0,r.kt)("p",null,"Here's how that looks, using jest as the test runner:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { isolateComponent } from 'isolate-react'\nimport { CounterButton } from './CounterButton'\n\ntest('starts at zero, then increments when clicked', () => {\n  // 1. Isolate\n  const button = isolateComponent(<CounterButton />)\n\n  // 2. Verify it starts with zero.\n  expect(button.content()).toContain('0')\n\n  // 3. Simulate three clicks\n  button.findOne('button').props.onClick()\n  button.findOne('button').props.onClick()\n  button.findOne('button').props.onClick()\n\n  // 4. Verify it is now 3\n  expect(button.content()).toContain('3')\n})\n")),(0,r.kt)("h2",{id:"step-by-step"},"Step by step:"),(0,r.kt)("h3",{id:"step-1-isolate-with-isolatecomponent"},"Step 1: isolate with ",(0,r.kt)("inlineCode",{parentName:"h3"},"isolateComponent"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  const button = isolateComponent(<CounterButton />)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"isolateComponent")," returns an IsolatedComponent. Check out ",(0,r.kt)("a",{parentName:"p",href:"/isolate-react/Testing%20Components/api"},"the api documentation")," for more information."),(0,r.kt)("h3",{id:"step-2-verify-it-starts-out-with-a-zero-value"},"Step 2: Verify it starts out with a zero value"),(0,r.kt)("p",null,"There are a few different ways to explore the isolated component's contents. "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"content()")," returns all of the inner content of the component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  expect(button.content()).toContain('0')\n")),(0,r.kt)("p",null,"We can also find the rendered ",(0,r.kt)("inlineCode",{parentName:"p"},"span")," and check its content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  // find by element type\n  expect(button.findOne('span').content()).toEqual('0')\n  // find by className\n  expect(button.findOne('.count').content()).toEqual('0')\n  // find by element type and class name\n  expect(button.findOne('span.count').content()).toEqual('0')\n")),(0,r.kt)("p",null,"There are a few other ways to explore the contents of an isolated component. Two of the most useful are ",(0,r.kt)("inlineCode",{parentName:"p"},"findAll()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"exists()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"findOne"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"findAll"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"exists")," each take a ",(0,r.kt)("a",{parentName:"p",href:"/isolate-react/Testing%20Components/api"},"Selector"),". A Selector can be a string that supports a subset of CSS-style matchers. It can also be a component reference, which will be discussed later in this guide."),(0,r.kt)("h3",{id:"step-3-simulate-interactions"},"Step 3: Simulate interactions"),(0,r.kt)("p",null,"Simulate interactions by using ",(0,r.kt)("inlineCode",{parentName:"p"},"findOne")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"findAll"),' to find rendered components or tags (called "nodes") and interacting with their props:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  button.findOne('button').props.onClick()\n  button.findOne('button').props.onClick()\n  button.findOne('button').props.onClick()\n")),(0,r.kt)("h3",{id:"step-4-verify-the-updated-content"},"Step 4: Verify the updated content"),(0,r.kt)("p",null,"Again, there are a few different ways to do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  expect(button.content()).toContain('3')\n\n  expect(button.findOne('span.count').content()).toEqual('3')\n")))}m.isMDXComponent=!0}}]);