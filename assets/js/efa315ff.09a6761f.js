"use strict";(self.webpackChunkisolate_components_docs=self.webpackChunkisolate_components_docs||[]).push([[2660],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=u(n),m=i,f=l["".concat(c,".").concat(m)]||l[m]||p[m]||o;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},7440:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return l}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={title:"Default arguments"},c=void 0,u={unversionedId:"test-driven-react/dependency-inversion/default-arguments",id:"test-driven-react/dependency-inversion/default-arguments",isDocsHomePage:!1,title:"Default arguments",description:"Description",source:"@site/docs/test-driven-react/dependency-inversion/04-default-arguments.md",sourceDirName:"test-driven-react/dependency-inversion",slug:"/test-driven-react/dependency-inversion/default-arguments",permalink:"/docs/test-driven-react/dependency-inversion/default-arguments",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/test-driven-react/dependency-inversion/04-default-arguments.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Default arguments"},sidebar:"tutorialSidebar",previous:{title:"Service Locator",permalink:"/docs/test-driven-react/dependency-inversion/service-locator"},next:{title:"Class constructors",permalink:"/docs/test-driven-react/dependency-inversion/class-constructors"}},d=[{value:"Description",id:"description",children:[]},{value:"Notes",id:"notes",children:[]},{value:"Example",id:"example",children:[]},{value:"Pros",id:"pros",children:[]},{value:"Cons",id:"cons",children:[]}],p={toc:d};function l(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Add services to each function that uses them as arguments."),(0,o.kt)("p",null,"In production, use default argument values to bring in the production implementations."),(0,o.kt)("p",null,"In tests, pass in test implementations."),(0,o.kt)("h2",{id:"notes"},"Notes"),(0,o.kt)("p",null,"This is a general technique that can be used anywhere, not only in react-aware code."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"api.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// production api implementation\nexport const api = {\n  getWidget: (id) => { ... }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"widgets.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { api } from './api'\n\nexport const widgets = {\n  getWidgetName: async (widgetId, widgetApi = api) => {\n    const widget = await widgetApi.getWidget(widgetId);\n    if (!widget) return \"Unknown Widget\"\n    return widget.name\n  }\n}\n\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"widgets.test.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { widgets } from './widgets'\n\ndescribe(\"getWidgetName\", () => {\n  test(\"unknown widget returns 'Unknown Widget'\", () => {\n    const fakeApi = {\n      getWidget: async () => undefined\n    }\n\n    // pass in the test implementation\n    expect(getWidgetName(42, fakeApi)).toEqual('Unknown Widget')\n  })\n})\n")),(0,o.kt)("h2",{id:"pros"},"Pros"),(0,o.kt)("h2",{id:"cons"},"Cons"))}l.isMDXComponent=!0}}]);