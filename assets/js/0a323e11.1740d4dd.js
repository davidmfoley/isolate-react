"use strict";(self.webpackChunkisolate_react_docs=self.webpackChunkisolate_react_docs||[]).push([[364],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return d}});var n=o(7294);function l(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){l(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,l=function(e,t){if(null==e)return{};var o,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(l[o]=e[o]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(l[o]=e[o])}return l}var i=n.createContext({}),c=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var o=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),k=c(o),d=l,f=k["".concat(i,".").concat(d)]||k[d]||p[d]||a;return o?n.createElement(f,r(r({ref:t},u),{},{components:o})):n.createElement(f,r({ref:t},u))}));function d(e,t){var o=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=o.length,r=new Array(a);r[0]=k;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:l,r[1]=s;for(var c=2;c<a;c++)r[c]=o[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,o)}k.displayName="MDXCreateElement"},8791:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return k}});var n=o(3117),l=o(102),a=(o(7294),o(3905)),r=["components"],s={title:"isolateHook API"},i=void 0,c={unversionedId:"isolateHook/api",id:"isolateHook/api",title:"isolateHook API",description:"isolateHook(hookToIsolate)",source:"@site/docs/isolateHook/api.md",sourceDirName:"isolateHook",slug:"/isolateHook/api",permalink:"/isolate-react/docs/isolateHook/api",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/isolateHook/api.md",tags:[],version:"current",frontMatter:{title:"isolateHook API"},sidebar:"tutorialSidebar",previous:{title:"Testing effects",permalink:"/isolate-react/docs/isolateHook/testing-react-context"}},u=[{value:"isolateHook(hookToIsolate)",id:"isolatehookhooktoisolate",children:[],level:2},{value:"IsolatedHook",id:"isolatedhook",children:[],level:2},{value:"currentValue()",id:"currentvalue",children:[],level:2},{value:"cleanup()",id:"cleanup",children:[],level:2},{value:"invoke()",id:"invoke",children:[],level:2},{value:"setContext(ContextType, value)",id:"setcontextcontexttype-value",children:[],level:2},{value:"setRef(index, value)",id:"setrefindex-value",children:[],level:2}],p={toc:u};function k(e){var t=e.components,o=(0,l.Z)(e,r);return(0,a.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"isolatehookhooktoisolate"},"isolateHook(hookToIsolate)"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"isolateHook")," allows testing of hook logic."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"isolateHook()")," accepts a hook and returns an ",(0,a.kt)("a",{parentName:"p",href:"#isolatedhook"},"IsolatedHook"),"."),(0,a.kt)("p",null,"Import isolateHook:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { isolateHook } from 'isolate-react'\n")),(0,a.kt)("p",null,"Isolate a hook:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const useCounter = () => {\n  const [count, setCount] = useState(0)\n\n  return {\n    count,\n    increment: () => setCount(x => x + 1)\n  }\n}\n\nconst isolated = isolateHook(useCounter)\n\nconsole.log(isolated().count) // => 0\n\nisolated().increment()\n\nconsole.log(isolated().count) // => 1\n\n")),(0,a.kt)("h2",{id:"isolatedhook"},"IsolatedHook"),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"IsolatedHook")," is returned by ",(0,a.kt)("a",{parentName:"p",href:"#isolatehook"},"isolateHook"),"."),(0,a.kt)("p",null,"It is a function that wraps the hook -- so it accepts the same parameters that the hook function accepts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const useHello = (name: string) => `Hello ${name}`\n\nconst testHello = isolateHook(useHello)\n\n// testHello takes the same parameters as useHello\nconsole.log(testHello("Trillian")) // => Hello Trillian\n')),(0,a.kt)("p",null,"It also provides some helpful methods:"),(0,a.kt)("h2",{id:"currentvalue"},"currentValue()"),(0,a.kt)("p",null,"Returns the return value from the last invocation of the hook. Does not execute the hook function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const useHello = (name: string) => `Hello ${name}`\n\nconst testHello = isolateHook(useHello)\ntestHello("Trillian")\n\nconsole.log(testHello.currentValue()) // Hello Trillian\n')),(0,a.kt)("h2",{id:"cleanup"},"cleanup()"),(0,a.kt)("p",null,"Cleans up the hook by running any effect cleanup functions returns from useEffect or useLayoutEffect."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const useHelloGoodbye = () => {\n  useEffect(() => {\n    console.log('Hello')\n    return () => { console.log('Goodbye') }\n  }, [])\n}\n\nconst testHelloAndGoodbye = isolateHook(useHelloAndGoodbye)\n\ntestHelloAndGoodbye() // Logs 'Hello'\ntestHelloAndGoodbye.cleanup() // Logs 'Goodbye'\n")),(0,a.kt)("h2",{id:"invoke"},"invoke()"),(0,a.kt)("p",null,"Re-executes the hook function, with the parameters from the most recent invocation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const useLogHello = (name: string) => {\n  console.log(`Hello ${name}`)\n}\n\nconst testLogHello = isolateHook(useLogHello)\n\ntestLogHello('Arthur') // => logs 'Hello Arthur'\ntestLogHello.invoke() // => logs 'Hello Arthur'\n\n")),(0,a.kt)("h2",{id:"setcontextcontexttype-value"},"setContext(ContextType, value)"),(0,a.kt)("p",null,"Sets a context value used by the hook and executes the hook. "),(0,a.kt)("p",null,"Note that the hook will not be executed if it does not use the specified context)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const NameContext = createContext('Zaphod')\n\nconst useHelloContext = () => {\n  const name = useContext(NameContext)\n  return `Hello ${name}`\n}\n\nconst testHelloContext = isolateHook(useHelloContext)\n\nconsole.log(testHelloContext()) // => Hello Zaphod\n\ntestHelloContext.setContext(NameContext, 'Trillian')\n\nconsole.log(testHelloContext()) // => Hello Trillian\n")),(0,a.kt)("h2",{id:"setrefindex-value"},"setRef(index, value)"),(0,a.kt)("p",null,"Sets the value of a ref. ",(0,a.kt)("em",{parentName:"p"},"Does not")," execute the hook function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const useHelloRef = () => {\n  const name = useRef('Ford').current\n  return `Hello ${name}`\n}\n\nconst testHelloRef = isolateHook(useHelloRef)\n\nconsole.log(testHelloRef()) // => Hello Ford\n\n// The first argument is the zero-based index of the ref, \n// in order of the calls to useRef within the hook function\ntestHelloRef.setRef(0, 'Trillian')\n\nconsole.log(testHelloRef()) // => Hello Trillian\n")))}k.isMDXComponent=!0}}]);