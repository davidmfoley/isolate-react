"use strict";(self.webpackChunkisolate_react_docs=self.webpackChunkisolate_react_docs||[]).push([[781],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return n?o.createElement(h,a(a({ref:t},c),{},{components:n})):o.createElement(h,a({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6943:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var o=n(3117),r=n(102),l=(n(7294),n(3905)),a=["components"],i={title:"API"},s=void 0,p={unversionedId:"isolateComponent/api",id:"isolateComponent/api",title:"API",description:"isolateComponent",source:"@site/docs/isolateComponent/api.md",sourceDirName:"isolateComponent",slug:"/isolateComponent/api",permalink:"/isolate-react/docs/isolateComponent/api",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/isolateComponent/api.md",tags:[],version:"current",frontMatter:{title:"API"},sidebar:"tutorialSidebar",previous:{title:"Working with refs",permalink:"/isolate-react/docs/isolateComponent/refs"},next:{title:"Overview",permalink:"/isolate-react/docs/isolateHook/overview"}},c=[{value:"isolateComponent",id:"isolatecomponent",children:[],level:2},{value:"IsolatedComponent",id:"isolatedcomponent",children:[{value:"content(), toString()",id:"content-tostring",children:[],level:3},{value:"inline(selector)",id:"inlineselector",children:[],level:3},{value:"setProps and mergeProps",id:"setprops-and-mergeprops",children:[{value:"mergeProps(newProps)",id:"mergepropsnewprops",children:[],level:4},{value:"setProps(newProps)",id:"setpropsnewprops",children:[],level:4}],level:3},{value:"cleanup()",id:"cleanup",children:[],level:3},{value:"setContext",id:"setcontext",children:[],level:3},{value:"findAll(selector)",id:"findallselector",children:[],level:3},{value:"findOne(selector)",id:"findoneselector",children:[],level:3},{value:"exists(selector)",id:"existsselector",children:[],level:3}],level:2},{value:"Selector",id:"selector",children:[{value:"Selector strings",id:"selector-strings",children:[],level:3},{value:"React component as selector",id:"react-component-as-selector",children:[],level:3}],level:2},{value:"ComponentNode",id:"componentnode",children:[{value:"content()",id:"content",children:[],level:3},{value:"toString()",id:"tostring",children:[],level:3},{value:"props",id:"props",children:[],level:3},{value:"findAll, findOne, exists",id:"findall-findone-exists",children:[{value:"Typescript note",id:"typescript-note",children:[],level:5}],level:3}],level:2}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,l.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"isolatecomponent"},"isolateComponent"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"isolateComponent")," accepts React elements, usually rendered with JSX, and returns an ",(0,l.kt)("a",{parentName:"p",href:"#isolatedcomponent"},"IsolatedComponent")),(0,l.kt)("p",null,"Import isolateComponent:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { isolateComponent } from 'isolate-react'\n")),(0,l.kt)("p",null,"Isolate a component:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const Hello = (props) => <div>Hello {props.name}</div>\n\nconst isolated = isolateComponent(<Hello name="Arthur" />)\n')),(0,l.kt)("h2",{id:"isolatedcomponent"},"IsolatedComponent"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IsolatedComponent")," is the return type of ",(0,l.kt)("a",{parentName:"p",href:"#isolatecomponent"},"isolateComponent"),". It provides methods for exploring and manipulating the isolated component."),(0,l.kt)("h3",{id:"content-tostring"},"content(), toString()"),(0,l.kt)("p",null,"Returns a string representation of the component's content."),(0,l.kt)("h3",{id:"inlineselector"},"inline(selector)"),(0,l.kt)("p",null,"Finds all components that match the given ",(0,l.kt)("a",{parentName:"p",href:"#selector"},"Selector")," and inlines them, incorporating them into the rendered output.\nAllows for testing some or all of the child components rendered by the isolated component together."),(0,l.kt)("h3",{id:"setprops-and-mergeprops"},"setProps and mergeProps"),(0,l.kt)("p",null,"These methods both update the props of the component under test. The difference is that mergeProps preserves the props that are not set, while setProps replaces all of the props."),(0,l.kt)("h4",{id:"mergepropsnewprops"},"mergeProps(newProps)"),(0,l.kt)("p",null,"Set a subset of props, and re-render the component under test."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const FirstLast = (props) => <div>{props.first} {props.last}</div>\n\nconst isolated = isolateComponent(<FirstLast first="Ford" last="Prefect" />)\nconsole.log(isolated.toString())    // => <div>Ford Prefect</div>\nisolated.mergeProps({last: Focus})\nconsole.log(isolated.toString())    // => <div>Ford Focus</div>\n')),(0,l.kt)("h4",{id:"setpropsnewprops"},"setProps(newProps)"),(0,l.kt)("p",null,"Replace all props, and re-render the component under test"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const FirstLast = (props) => <div>{props.first} {props.last}</div>\n\nconst isolated = isolateComponent(<FirstLast first=\"Ford\" last=\"Prefect\" />)\nconsole.log(isolated.toString()())    // => <div>Ford Prefect</div>\nisolated.mergeProps({first: 'Arthur', last: 'Dent'})\nconsole.log(isolated.toString()())    // => <div>Arthur Dent</div>\n")),(0,l.kt)("h3",{id:"cleanup"},"cleanup()"),(0,l.kt)("p",null,"Cleans up the component and runs all effect cleanups (functions returned by useEffect handlers)."),(0,l.kt)("p",null,"This is equivalent to unmounting a component/removing it from the tree."),(0,l.kt)("h3",{id:"setcontext"},"setContext"),(0,l.kt)("p",null,"Set a context value."),(0,l.kt)("p",null,"Useful when testing a component that uses values from ",(0,l.kt)("inlineCode",{parentName:"p"},"useContext:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const NameContext = createContext('Zaphod')\n\nconst HelloFromContext = () => {\n  const name = useContext(NameContext)\n  return <div>Hello ${name}</div>\n}\n\nconst isolated = isolateComponent(<Hello />)\nconsole.log(isolated.toString()())    // => <div>Zaphod</div>\n\nisolated.setContext(NameContext, 'Trillian')\nconsole.log(isolated.toString()())    // => <div>Trillian</div>\n")),(0,l.kt)("h3",{id:"findallselector"},"findAll(selector)"),(0,l.kt)("p",null,"Find all nodes that match the given ",(0,l.kt)("a",{parentName:"p",href:"#selector"},"Selector"),"."),(0,l.kt)("p",null,"Returns an array of ",(0,l.kt)("a",{parentName:"p",href:"#componentnode"},"ComponentNodes"),"."),(0,l.kt)("h3",{id:"findoneselector"},"findOne(selector)"),(0,l.kt)("p",null,"Find a single child node that matches the given ",(0,l.kt)("a",{parentName:"p",href:"#selector"},"Selector"),"."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("a",{parentName:"p",href:"#componentnode"},"ComponentNode")," if and only if there is a single matching node."),(0,l.kt)("p",null,"Throws an Error if there are zero or multiple matching nodes."),(0,l.kt)("h3",{id:"existsselector"},"exists(selector)"),(0,l.kt)("p",null,"Check for the existence of any html elements or react components matching the selector.\nReturns true if any found, false if none found."),(0,l.kt)("h2",{id:"selector"},"Selector"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Selectors")," are used with the methods ",(0,l.kt)("inlineCode",{parentName:"p"},"findOne"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"findAll"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"exists"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"inline")," to match child nodes."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Selector")," can be either a string or a component function."),(0,l.kt)("h3",{id:"selector-strings"},"Selector strings"),(0,l.kt)("p",null,"Selector strings support a subset of css-like matching, including matching id or class names and some matching of arbitrary properties."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find by tag:")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"button")," will match any ",(0,l.kt)("inlineCode",{parentName:"p"},"<button>")," tags"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find by id:")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"div#awesome-id")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"#awesome-id")," will find ",(0,l.kt)("inlineCode",{parentName:"p"},"<div id='awesome' />")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find by className:")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"span.cool")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".cool")," will each find ",(0,l.kt)("inlineCode",{parentName:"p"},"<span className='cool' />"),"m"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find by a matching prop:")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[data-test-id=foobar]")," will find the react element or html element with a ",(0,l.kt)("inlineCode",{parentName:"p"},"data-test-id")," prop with the value ",(0,l.kt)("inlineCode",{parentName:"p"},"foobar")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find a react component by name:")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MyComponent")," will match a react component with a ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#displayname"},"displayName"),' of "MyComponent"'),(0,l.kt)("h3",{id:"react-component-as-selector"},"React component as selector"),(0,l.kt)("p",null,"You can use a react component function as a selector"),(0,l.kt)("h2",{id:"componentnode"},"ComponentNode"),(0,l.kt)("p",null,"The methods ",(0,l.kt)("inlineCode",{parentName:"p"},"findOne")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"findAll")," on an isolated component return ",(0,l.kt)("inlineCode",{parentName:"p"},"ComponentNodes"),". "),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"ComponentNode")," is a single node that was found within the rendered elements of an isolated component. It offers methods for inspecting its content and props."),(0,l.kt)("h3",{id:"content"},"content()"),(0,l.kt)("p",null,"Returns the inner content of the node."),(0,l.kt)("h3",{id:"tostring"},"toString()"),(0,l.kt)("p",null,"Returns the outer content of the node."),(0,l.kt)("h3",{id:"props"},"props"),(0,l.kt)("p",null,"Provides access to the props that were used on the latest render. "),(0,l.kt)("h3",{id:"findall-findone-exists"},"findAll, findOne, exists"),(0,l.kt)("p",null,"These methods work the same as the equivalent methods on ",(0,l.kt)("a",{parentName:"p",href:"#isolatedcomponent"},"IsolatedComponent"),", scoped to the children of the ComponentNode."),(0,l.kt)("h5",{id:"typescript-note"},"Typescript note"),(0,l.kt)("p",null,"Depending on the Selector that was used, access to ",(0,l.kt)("inlineCode",{parentName:"p"},"props")," may be typesafe."),(0,l.kt)("p",null,"If a component function was used as a selector, the type of ",(0,l.kt)("inlineCode",{parentName:"p"},"props")," will match the props of that component. If a string selector was used, the props willl be untyped (any)."))}m.isMDXComponent=!0}}]);