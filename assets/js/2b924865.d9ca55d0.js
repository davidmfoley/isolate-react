"use strict";(self.webpackChunkisolate_react_docs=self.webpackChunkisolate_react_docs||[]).push([[185],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2012:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],s={title:"Avoid mocks/stubs by separating side-effects and logic"},l=void 0,c={unversionedId:"More/Dependencies/dependency-removal",id:"More/Dependencies/dependency-removal",title:"Avoid mocks/stubs by separating side-effects and logic",description:"Before we get into all of the techniques we can use to invert a dependency, let's look at the most powerful technique we have for dealing with unruly dependencies: get rid of them.",source:"@site/docs/More/Dependencies/01-dependency-removal.md",sourceDirName:"More/Dependencies",slug:"/More/Dependencies/dependency-removal",permalink:"/isolate-react/More/Dependencies/dependency-removal",editUrl:"https://github.com/davidmfoley/isolate-react/docusaurus/docs/More/Dependencies/01-dependency-removal.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Avoid mocks/stubs by separating side-effects and logic"},sidebar:"tutorialSidebar",previous:{title:"Those Pesky Dependencies",permalink:"/isolate-react/More/Dependencies/overview"},next:{title:"Closures",permalink:"/isolate-react/More/Dependencies/closures"}},u=[{value:"But, now we aren&#39;t testing everything!",id:"but-now-we-arent-testing-everything",children:[{value:"How do we test that getUserName correctly calls findUserByEmail!?",id:"how-do-we-test-that-getusername-correctly-calls-finduserbyemail",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Before we get into all of the techniques we can use to invert a dependency, let's look at the most powerful technique we have for dealing with unruly dependencies: get rid of them."),(0,a.kt)("p",null,"Take our previous example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// api.js\n\nimport { findUserByEmail } from \'./database\'\n\nexport const getUserName = async (email) => {\n  const user = await findUserByEmail(email)\n\n  if (!user) return "User Not Found"\n  if (!user.name) return "No Name Provided"\n  if (user.title) return `${user.title}. ${user.name}`\n\n  return user.name\n}\n')),(0,a.kt)("p",null,'If we break out the logic we want to test into a separate function, we can then test that function without any "mocks" at all.'),(0,a.kt)("p",null,"The result looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// api.js\n\nimport { findUserByEmail } from \'./database\'\n\nexport const formatUserName = (user) => {\n  if (!user) return "User Not Found"\n  if (!user.name) return "No Name Provided"\n  if (user.title) return `${user.title}. ${user.name}`\n\n  return user.name\n}\n\nexport const getUserName = async (email) => {\n  const user = await findUserByEmail(email)\n\n  // Test this function directly\n  return formatUserName(user)\n}\n')),(0,a.kt)("p",null,"Now, we can test ",(0,a.kt)("inlineCode",{parentName:"p"},"formatUserName")," directly by passing in different values like ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"{ name: 'Arthur'}")," and asserting about the result."),(0,a.kt)("p",null,"This is one of the most powerful tools in our software design toolkit, and should usually be the first one we reach for."),(0,a.kt)("h2",{id:"but-now-we-arent-testing-everything"},"But, now we aren't testing everything!"),(0,a.kt)("h3",{id:"how-do-we-test-that-getusername-correctly-calls-finduserbyemail"},"How do we test that getUserName correctly calls findUserByEmail!?"),(0,a.kt)("p",null,"You have a few options:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Live with it. In this case, the invocation of findUserByEmail is not the important logic, and is trivial enough that we can assume it is correct."),(0,a.kt)("li",{parentName:"ul"},"Combine this technique with one of the following techniques, and write tests that assert that the expected arguments are passed and that any exceptional cases are properly handled.")))}d.isMDXComponent=!0}}]);